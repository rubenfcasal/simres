% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mc.plot.R
\name{mc.plot}
\alias{mc.plot}
\alias{conv.plot}
\alias{mc.integral}
\title{Exploratory plots of a random sequence}
\usage{
mc.plot(
  x,
  level = 0.95,
  true.value = NULL,
  main,
  omd = c(0.05, 0.95, 0.01, 0.95),
  ...
)

conv.plot(
  x,
  level = 0.95,
  lty = c(conv = 1, value = 1, error = 3),
  lwd = c(conv = 2, value = 1, error = 1),
  ylim = NULL,
  xlab = "Number of generations",
  ylab = "Mean and error range",
  ...
)

mc.integral(fun, a, b, n, level = 0.95, plot = TRUE, ...)
}
\arguments{
\item{x}{the simulated values.}

\item{level}{the confidence level required.}

\item{true.value}{the theoretical value.}

\item{main}{an overall title for the plot.}

\item{omd}{a vector of the form \code{c(x1, x2, y1, y2)} giving the region inside
outer margins in normalized device coordinates (i.e. fractions of the device
region).}

\item{...}{further arguments passed to other functions (e.g. to \code{conv.plot()}).}

\item{lty}{a vector of line types (of the form \code{c(conv, value, error)}).}

\item{lwd}{a vector of line widths (of the form \code{c(conv, value, error)}).}

\item{ylim}{the y limits of the plot.}

\item{xlab, ylab}{the axis titles.}

\item{fun}{an one-dimensional function to be integrated on [a, b]}

\item{a, b}{the limits of integration (must be finite).}

\item{n}{number of uniform generations.}

\item{plot}{logical; if \code{TRUE} a convergence plot is draw.}
}
\value{
Return, invisibly in the case of plot functions, the approximation by
simulation (the arithmetic mean) and the corresponding error range (half
width of the confidence interval).
}
\description{
\code{mc.plot()} draws the approximation of the distribution, the
convergence plot (by calling \code{conv.plot()}), a normal QQ plot
and a sequential plot.

\code{conv.plot()} draws a convergence plot.

\code{mc.integral()} integrates an one-dimensional function
over a bounded interval using classic Monte-Carlo integration and draws
the corresponding convergence plot.
}
\examples{
set.seed(1)
teor <- 0
res <- mc.plot(rnorm(1000, mean = teor), true.value = teor)
res
set.seed(1)
p <- 0.4
res <- conv.plot(rbinom(1000, size = 1, prob = p))
abline(h = p, lty = 2, col = "red") # Theoretical value
res
fun <- function(x) ifelse((x > 0) & (x < 1), 4 * x^4, 0)
curve(fun, 0, 1)
abline(h = 0, lty = 2)
abline(v = c(0, 1), lty = 2)
set.seed(1)
mc.integral(fun, 0, 1, 1000)
abline(h = 4/5, lty = 2, col = "red") # Theoretical value
set.seed(1)
mc.integral(fun, 0, 1, 5000, plot = FALSE)
}
